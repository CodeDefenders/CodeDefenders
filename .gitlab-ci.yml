include:
  # This applies global rules to run pipelines for the default branch, tags and all types of merge requests
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml
  # This includes the GitLab provided dependency scanning jobs
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  # This includes the GitLab provided SAST jobs.
  - template: Security/SAST.gitlab-ci.yml
  # This includes the GitLab provided secret detection job.
  - template: Security/Secret-Detection.gitlab-ci.yml


stages:
  - validate
  - build
  - test
  - deploy
  - visualize

default:
  image: maven:3-jdk-11-slim
  cache:
    paths:
      - .m2/repository/
    when: always
  artifacts:
    # Expire all artifacts already after 14 days. (Default is around 30 days/4 weeks)
    expire_in: 14 days

variables:
  # Arguments passed to maven before CLI arguments, only used from Maven 4 onward
  MAVEN_ARGS: '--no-transfer-progress -Dmaven.repo.local=.m2/repository -Dmaven.compiler.useIncrementalCompilation=false -Prelease'
  # Jobs are executed in docker, fetch should be available and faster. Could be already configured in the executor.
  GIT_STRATEGY: fetch
  # Do a shallow clone. 50 is the default value for new repositories from GitLab 12 onwards
  GIT_DEPTH: 50
  # Print upload and download progress for artifact and cache operations every second
  TRANSFER_METER_FREQUENCY: '1s'
  # Disable all SAST jobs by default, since we manually enable/configure those
  SAST_DISABLED: 'true'


checkstyle:
  stage: validate
  needs: [ ]
  script:
    - mvn $MAVEN_ARGS validate
    - scripts/ci/generate-codequality-report-from-checkstyle.sh ./target/checkstyle-result.xml > checkstyle-report.json
  artifacts:
    reports:
      codequality:
        - checkstyle-report.json

checkdbmigrationversions:
  image: busybox:latest
  stage: validate
  needs: [ ]
  cache: [ ]
  script:
    - scripts/ci/check-database-migration-version-numbers.sh

metrics:
  image: debian:11-slim
  stage: validate
  needs: [ ]
  cache: [ ]
  script:
    - printf 'files_total{language="java"} %d\n' "$(find . -type f -name "*.java" | wc -l)" >> metrics.txt
    - printf 'code_lines_total{language="java"} %d\n' "$(find . -type f -name "*.java" | xargs cat | wc -l)" >> metrics.txt
    - printf 'todo_occurrences_total %d\n' "$(grep -R -I --exclude-dir={.git,target} TODO . | wc -l)" >> metrics.txt
  artifacts:
    reports:
      metrics: metrics.txt


build:
  stage: build
  needs: [ ]
  script:
    - mvn $MAVEN_ARGS -DskipCheckstyle -DskipTests package
    - printf 'artifact_size_bytes{artifact="codedefenders.war"} %d\n' "$(stat --printf="%s" target/codedefenders.war)" >> metrics.txt
  artifacts:
    paths:
      - target/
    reports:
      metrics: metrics.txt


###
### Unit and Integration tests
###

unit-tests:
  stage: test
  # This implies a dependency on the build job (and so downloads its artifacts)
  needs:
    - build
  before_script:
    # Update timestamps of build output files, so maven does not think it needs to recompile those
    - find ./target | xargs -exec touch -c {} \;
  script:
    - mvn $MAVEN_ARGS -DskipCheckstyle test
  after_script:
    - mvn $MAVEN_ARGS jacoco:report
    # Print summary line, so GitLab can extract Code Coverage
    - cat target/site/jacoco/index.html | grep -o '<tfoot>.*</tfoot>'
  # Regex for extracting a coverage percentage, project wide configuration is planned to be deprecated at some point
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    paths:
      - target/jacoco.exec
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

# Template for database integration tests, we repeat those for the three supported database versions
.integration-tests_database:
  stage: test
  needs:
    - build
  variables:
    MYSQL_DATABASE: codedefenders
    MYSQL_ROOT_PASSWORD: ''
    MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
  before_script:
    # Update timestamps of build output files, so maven does not think it needs to recompile those
    - find ./target | xargs -exec touch -c {} \;
  script:
    - mvn $MAVEN_ARGS -DskipCheckstyle -DskipUnitTests verify -P it-database-only
  artifacts:
    paths:
      - target/jacoco-it.exec
    reports:
      junit:
        - target/failsafe-reports/TEST-*.xml

integration-tests_database_mariadb-10-5:
  extends: .integration-tests_database
  services:
    - name: mariadb:10.5.10
      alias: database
  after_script:
    - mvn $MAVEN_ARGS jacoco:report-integration
    # Print summary line, so GitLab can extract Code Coverage
    - cat target/site/jacoco-it/index.html | grep -o '<tfoot>.*</tfoot>'
  # Regex for extracting a coverage percentage, project wide configuration is planned to be deprecated at some point
  coverage: '/Total.*?([0-9]{1,3})%/'

integration-tests_database_mariadb-10-3:
  extends: .integration-tests_database
  services:
    - name: mariadb:10.3.31
      alias: database
  rules:
    # Exclude job for Draft merge requests
    - if: '$CI_MERGE_REQUEST_TITLE !~ /^Draft:/'

integration-tests_database_mysql-8-0:
  extends: .integration-tests_database
  services:
    - name: mysql:8.0.28
      alias: database
  rules:
    # Exclude job for Draft merge requests
    - if: '$CI_MERGE_REQUEST_TITLE !~ /^Draft:/'


###
### Analysis (Source Code, Dependencies, and Secret detection)
###

spotbugs-sast:
  stage: test
  needs:
    - build
  variables:
    # We target Java 11 (non default)
    SAST_JAVA_VERSION: 11
    # We already have a compiled version of the project, no need to recompile it
    COMPILE: 'false'
    # GitLab Spotbugs uses MAVEN_CLI_OPTS for additional CLI flags
    MAVEN_CLI_OPTS: '$MAVEN_ARGS -DskipCheckstyle -DskipTests'
    # Needs to be set explicitly even if it's set via $MAVEN_ARGS/$MAVEN_CLI_OPTS above, to prevent a fatal spotbugs
    # error: 'lstat /root/.m2/repository: no such file or directory'. There exists an upstream issue for a similar error
    # https://gitlab.com/gitlab-org/gitlab/-/issues/334854 but the upstream issue is for maven multi-module projects.
    MAVEN_REPO_PATH: '.m2/repository'
  before_script:
    # Remove unrelated project files
    - rm {src/main/resources,target/classes,target/codedefenders/WEB-INF/classes}/data/build.xml {src/test/resources,target/test-classes}/itests/build.xml {src/main/webapp,target/codedefenders}/project-exporter/{build.gradle,gradlew}
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:
    # Exclude job for Draft merge requests and trigger it otherwise
    - if: '$CI_MERGE_REQUEST_TITLE !~ /^Draft:/'

gemnasium-maven-dependency_scanning:
  stage: test
  needs: [ ]
  variables:
    MAVEN_CLI_OPTS: "$MAVEN_ARGS -DskipCheckstyle -DskipTests"
  rules:
    # Exclude job for Draft merge requests
    - if: '$CI_MERGE_REQUEST_TITLE !~ /^Draft:/'

secret_detection:
  stage: test
  needs: [ ]
  cache: [ ]
  rules:
    # Overwrite rules so job is executed even if $SAST_DISABLED is set
    - when: always

semgrep-sast:
  stage: test
  needs: [ ]
  cache: [ ]
  rules:
    # Overwrite rules so job is executed even if $SAST_DISABLED is set
    - when: always


###
### Merge Unit and Integration test coverage and convert it so GitLab can visualize covered/uncovered lines
###

merged-test-coverage:
  stage: visualize
  needs:
    - build
    - unit-tests
    - integration-tests_database_mariadb-10-5
  script:
    - mvn $MAVEN_ARGS -Djacoco.destFile='${project.build.directory}/jacoco-merged.exec' -Djacoco.dataFile='${project.build.directory}/jacoco-merged.exec' jacoco:merge jacoco:report
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml

# See: https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html#java-and-kotlin-examples
visualize-coverage:
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  stage: visualize
  needs:
    - merged-test-coverage
  cache: [ ]
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py target/site/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > target/site/cobertura.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/site/cobertura.xml


###
### Deploy jobs
###

.deploy:
  image: debian:11-slim
  stage: deploy
  needs:
    - build
  cache: [ ]
  variables:
    # The deploy-jobs do not need the repository in any way
    GIT_STRATEGY: none
  before_script:
    # Taken from: https://docs.gitlab.com/ee/ci/ssh_keys/README.html#ssh-keys-when-using-the-docker-executor
    - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 --decode | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_HOST_KEY" > ~/.ssh/known_hosts
  script:
    - scp target/codedefenders.war "deploy@codedefenders.fim.uni-passau.de:/tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "chown deploy:tomcat /tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "chmod 640 /tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "mv /tmp/$DEPLOY_ENV.war /var/lib/tomcat9/webapps/$DEPLOY_ENV.war"
  tags:
    - deploy

deploy-staging:
  extends: .deploy
  variables:
    DEPLOY_ENV: staging
  environment:
    name: staging
    url: https://codedefenders.fim.uni-passau.de/staging/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-production:
  extends: .deploy
  variables:
    DEPLOY_ENV: ROOT
  environment:
    name: production
    url: https://code-defenders.org/
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
