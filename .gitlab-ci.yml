include:
  # This applies global rules to run piplines for the default branch, tags and all types of merge requests
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml
  # This includes the GitLab provided dependency scanning jobs
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  # This includes the GitLab provided SAST jobs.
  - template: Security/SAST.gitlab-ci.yml
  # This includes the GitLab provided secret detection job.
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - build
  - test
  - package
  - deploy

default:
  image: maven:3-jdk-8
  cache:
    paths:
      - .m2/repository/

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

checkstyle:
  stage: build
  script:
    - mvn validate
  artifacts:
    paths:
      - target/checkstyle-*

checkstyle-extract:
  stage: test
  when: always
  script:
    - |
      file="";
      first=1;
      output="checkstyle-report.json"
      path="$(pwd)";
      echo "[" > "$output";
      tail -n +3 target/checkstyle-result.xml | while read p; do
      if echo "$p" | grep -q "<file name.*" ; then
        file=$(expr "$p" : '<file name=\"\(.*\)\".*' | sed 's@'"$path"'@@g' );
      echo "$file";
      fi
      if echo "$p" | grep -q "<error.*" ; then
        line="$(expr "$p" : '.*line=\"\([0-9]*\)\".*')";
        message="$(expr "$p" : '.*message=\"\(.*\)\" source.*' | sed -e 's/&apos;/`/g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/\\\"/g' -e 's/&amp;/\&/g')"
      checksum=$(echo "$file $line $message" | sha1sum | awk '{print $1}')
      if [ "$first" == 1 ] ; then
        echo "{ \"description\": \"$message\", \"fingerprint\": \"$checksum\", \"location\": { \"path\": \"$file\", \"lines\": { \"begin\": \"$line\" } } }" >> "$output";
      first=0;
      else
        echo ",{ \"description\": \"$message\", \"fingerprint\": \"$checksum\", \"location\": { \"path\": \"$file\", \"lines\": { \"begin\": \"$line\" } } }" >> "$output"
      fi
      fi
      done ;
      echo "]" >> "$output"
  # This implies a dependency on the checkstyle job (an so downloads its artifacts)
  needs:
    - checkstyle
  artifacts:
    reports:
      codequality:
        - checkstyle-report.json

checkdbmigrationversions:
  stage: test
  script:
    - |
      output="$(find src/main/resources/db -name "V*" | sed -e 's/.*\(V[0-9._]*\)__.*/\1/' | sort | uniq -d)"
      if [ -z "$output" ]
      then
        echo "No duplicate versions"
        exit 0
      else
        echo "There are multiple migrationscripts with the same version:"
        echo "$output"
        exit 1
      fi

metrics:
  stage: build
  script:
    - echo "files{language=\"java\"}" "$(find . -type f -name "*.java" | wc -l)" >> metrics.txt
    - echo "code_lines{language=\"java\"}" "$(find . -type f -name "*.java" | xargs cat | wc -l)" >> metrics.txt
    - echo "todo_occurrences" "$(find . -type f | xargs grep TODO | wc -l)" >> metrics.txt
  artifacts:
    reports:
      metrics: metrics.txt

build:
  stage: build
  script:
    - mvn --no-transfer-progress clean compile -Dcheckstyle.skip
  artifacts:
    paths:
      - target/
    expire_in: 3 hrs

test:
  stage: test
  script:
    - apt update && apt-get -y install libncurses5
    - mvn --no-transfer-progress test -Dcheckstyle.skip
    - cat target/site/jacoco-ut/index.html | grep -o '<tfoot>.*</tfoot>'
  # This implies a dependency on the build job (an so downloads its artifacts)
  needs:
    - build
  artifacts:
    paths:
      - target/surefire-reports/
      - target/site/jacoco-ut/
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

spotbugs-sast:
  stage: test
  dependencies: [ ]
  needs: [ ]
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

gemnasium-maven-dependency_scanning:
  stage: test
  dependencies: [ ]
  needs: [ ]
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

secret_detection:
  stage: test
  dependencies: [ ]
  needs: [ ]
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

package:
  stage: package
  script:
    - mvn --no-transfer-progress package -Dcheckstyle.skip -DskipTests
  needs:
    - build
  artifacts:
    paths:
      - target/codedefenders.war
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.deploy:
  stage: deploy
  before_script:
    ## Taken from: https://docs.gitlab.com/ee/ci/ssh_keys/README.html#ssh-keys-when-using-the-docker-executor
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_HOST_KEY" > ~/.ssh/known_hosts
  script:
    - scp target/codedefenders.war "deploy@codedefenders.fim.uni-passau.de:/tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "chown deploy:tomcat /tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "chmod 640 /tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "mv /tmp/$DEPLOY_ENV.war /var/lib/tomcat9/webapps/$DEPLOY_ENV.war"
  needs:
    - package

deploy-staging:
  extends: .deploy
  variables:
    DEPLOY_ENV: staging
  environment:
    name: staging
    url: https://codedefenders.fim.uni-passau.de/staging/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-production:
  extends: .deploy
  variables:
    DEPLOY_ENV: ROOT
  environment:
    name: production
    url: https://code-defenders.org/
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
