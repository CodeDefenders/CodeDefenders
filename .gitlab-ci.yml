include:
  # This applies global rules to run piplines for the default branch, tags and all types of merge requests
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml
  # This includes the GitLab provided dependency scanning jobs
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  # This includes the GitLab provided SAST jobs.
  - template: Security/SAST.gitlab-ci.yml
  # This includes the GitLab provided secret detection job.
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - validate
  - build
  - test
  - package
  - deploy
  - visualize

default:
  image: maven:3-jdk-11
  cache:
    paths:
      - .m2/repository/

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  SAST_JAVA_VERSION: 11

checkstyle:
  stage: validate
  needs: []
  script:
    - mvn --no-transfer-progress validate -Dmaven.repo.local=./.m2/repository
    - scripts/ci/generate-codequality-report-from-checkstyle.sh ./target/checkstyle-result.xml > checkstyle-report.json
  artifacts:
    reports:
      codequality:
        - checkstyle-report.json

checkdbmigrationversions:
  stage: validate
  needs: []
  script:
    - scripts/ci/check-database-migration-version-numbers.sh

metrics:
  stage: validate
  script:
    - echo "files{language=\"java\"}" "$(find . -type f -name "*.java" | wc -l)" >> metrics.txt
    - echo "code_lines{language=\"java\"}" "$(find . -type f -name "*.java" | xargs cat | wc -l)" >> metrics.txt
    - echo "todo_occurrences" "$(find . -type f | xargs grep TODO | wc -l)" >> metrics.txt
  artifacts:
    reports:
      metrics: metrics.txt


build:
  stage: build
  script:
    - mvn --no-transfer-progress clean compile -Dcheckstyle.skip -Dmaven.repo.local=./.m2/repository
  artifacts:
    paths:
      - target/
    expire_in: 3 hrs


test-unit:
  stage: test
  # This implies a dependency on the build job (an so downloads its artifacts)
  needs:
    - build
  script:
    - mvn --no-transfer-progress test -Dcheckstyle.skip
  after_script:
    # Print summary line, so GitLab can extract Code Coverage
    - cat target/site/jacoco-ut/index.html | grep -o '<tfoot>.*</tfoot>'
  artifacts:
    paths:
      - target/surefire-reports/
      - target/site/jacoco-ut/
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

test-integration-database:
  stage: test
  needs:
    - build
  script:
    # libncurses5 is a necessary dependency for the database tests (aka the ch.vorburger.mariaDB4j:mariaDB4j dependency)
    - apt update && apt-get -y install libncurses5
    - mvn --no-transfer-progress verify -P it-database-only -Dcheckstyle.skip -DskipUnitTests
  artifacts:
    reports:
      junit:
        - target/failsafe-reports/TEST-*.xml

spotbugs-sast:
  stage: test
  needs:
    - build
  variables:
    MAVEN_REPO_PATH: ./.m2/repository
    COMPILE: "false"
  artifacts:
    reports:
      sast: gl-sast-report.json
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

gemnasium-maven-dependency_scanning:
  stage: test
  needs: [ ]
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

secret_detection:
  stage: test
  needs: [ ]
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


package:
  stage: package
  script:
    - mvn --no-transfer-progress package -Dcheckstyle.skip -DskipTests
  needs:
    - build
  artifacts:
    paths:
      - target/codedefenders.war
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


.deploy:
  stage: deploy
  before_script:
    ## Taken from: https://docs.gitlab.com/ee/ci/ssh_keys/README.html#ssh-keys-when-using-the-docker-executor
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 --decode | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_HOST_KEY" > ~/.ssh/known_hosts
  script:
    - scp target/codedefenders.war "deploy@codedefenders.fim.uni-passau.de:/tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "chown deploy:tomcat /tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "chmod 640 /tmp/$DEPLOY_ENV.war"
    - ssh deploy@codedefenders.fim.uni-passau.de "mv /tmp/$DEPLOY_ENV.war /var/lib/tomcat9/webapps/$DEPLOY_ENV.war"
  needs:
    - package
  tags:
    - deploy

deploy-staging:
  extends: .deploy
  variables:
    DEPLOY_ENV: staging
  environment:
    name: staging
    url: https://codedefenders.fim.uni-passau.de/staging/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-production:
  extends: .deploy
  variables:
    DEPLOY_ENV: ROOT
  environment:
    name: production
    url: https://code-defenders.org/
  rules:
    - if: $CI_COMMIT_TAG
      when: manual


# See: https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html#java-and-kotlin-examples
coverage:
  stage: visualize
  needs:
    - test-unit
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py target/site/jacoco-ut/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > target/site/cobertura.xml
  artifacts:
    reports:
      cobertura: target/site/cobertura.xml
