package org.codedefenders.singleplayer;

import org.codedefenders.*;

import javax.xml.crypto.Data;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.codedefenders.Constants.AI_DIR;
import static org.codedefenders.Constants.F_SEP;

/**
 * @author Ben Clegg
 * An AI defender. Uses tests generated by EvoSuite to kill mutants.
 */
public class AiDefender extends AiPlayer {

	public AiDefender(Game g) {
		super(g);
		role = Game.Role.DEFENDER;
	}
	public boolean turnHard() {
		//Run all generated tests for class.
		if(game.getTests().isEmpty()) {
			//Add test suite to game if it isn't present.
			GameManager gm = new GameManager();
			Test newTest = gm.submitAiTestFullSuite(game);
			newTest.insert();
			//Run the tests on existing mutants.
			MutationTester.runTestOnAllMutants(game, newTest, new ArrayList<String>());

		}
		//Do nothing else, test is automatically re-run on new mutants by GameManager.
		//TODO: Add equivalence check.
		//Call equivalent only if test suite passes on mutant.
		return true;
	}

	public boolean turnMedium() {
		//Choose all tests which cover modified line(s)?
		//Perhaps just 1 or 2?
		//Perhaps higher chance of equivalence call? May happen due to weaker testing.
		return turnHard();
	}

	public boolean turnEasy() {
		//Choose a random test which covers the modified line(s)?
		//Perhaps just a random test?
		//Perhaps higher chance of equivalence call? May happen due to weaker testing.
		GameManager gm = new GameManager();
		try {
			int tNum = selectTest(GenerationMethod.RANDOM);
			try {
				makeTestFromSuite(gm, tNum);
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}
		} catch (Exception e) {
			//Assume no more choices remain.
			//Do nothing.
		}

		return true;
	}

	private int selectTest(GenerationMethod strategy) throws Exception {
		ArrayList<Integer> usedTests = DatabaseAccess.getUsedAiTestsForGame(game);
		int totalTests = getNumberOfTests();
		Exception e = new Exception("No choices remain.");

		if(usedTests.size() == totalTests) {
			throw e;
		}
		int t = -1;

		for (int i = 0; i <= 3; i++) {
			//Try to get test by default strategy.
			if (strategy.equals(GenerationMethod.RANDOM)) {
				t = (int) Math.floor(Math.random() * getNumberOfTests());
			}
			//TODO: Other strategies.

			if ((!usedTests.contains(t)) && (t != -1)) {
				//Strategy found an unused test.
				return t;
			}
		}

		//If standard strategy fails, choose first non-selected test.
		for (int x = 0; x < totalTests; x++) {
			if(!usedTests.contains(x)) {
				//Unused test found.
				return x;
			}
		}

		//Something went wrong.
		throw e;
	}

	private void useTestFromSuite(int testNum) throws IOException {

		ArrayList<String> messages = new ArrayList<String>();
		MutationTester.runTestOnAllMutants(game, t, messages);
		DatabaseAccess.setAiTestAsUsed(testNum, game);
	}

}
