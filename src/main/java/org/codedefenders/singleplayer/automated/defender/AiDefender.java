package org.codedefenders.singleplayer.automated.defender;

import org.codedefenders.*;
import org.codedefenders.multiplayer.LineCoverage;
import org.codedefenders.singleplayer.AiPlayer;
import org.codedefenders.singleplayer.PrepareAI;
import org.codedefenders.singleplayer.automated.defender.TestComparator;
import org.codedefenders.singleplayer.automated.defender.TestsIndexContents;

import javax.xml.crypto.Data;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

/**
 * @author Ben Clegg
 * An AI defender. Uses tests generated by EvoSuite to kill mutants.
 */
public class AiDefender extends AiPlayer {

	public static final int ID = 2;

	public AiDefender(Game g) {
		super(g);
		role = Role.DEFENDER;
	}
	public boolean turnHard() {
		//Choose test which kills a high number of generated mutants.
		return runTurn(GenerationMethod.COVERAGE);
	}

	public boolean turnEasy() {
		//Choose random test.
		return runTurn(GenerationMethod.RANDOM);
	}

	protected boolean runTurn(GenerationMethod strat) {
		try {
			TestsIndexContents ind = new TestsIndexContents(game.getCUT());

			int tNum = selectTest(strat, ind);
			try {
				useTestFromSuite(tNum, ind);
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			//Assume no more choices remain.
			//Do nothing.
		}

		return true;
	}

	private int selectTest(GenerationMethod strategy, TestsIndexContents indexCon) throws Exception {

		ArrayList<Integer> usedTests = DatabaseAccess.getUsedAiTestsForGame(game);
		int totalTests = indexCon.getNumTests();
		Exception e = new Exception("No choices remain.");

		if(usedTests.size() == totalTests) {
			throw e;
		}
		int t = -1;

		//Get available tests, only ones in the xml file
		//Prevents usage of useless tests
		ArrayList<Test> origTests = new ArrayList<Test>();
		for (int tId : indexCon.getTestIds()) {
			origTests.add(DatabaseAccess.getTestForId(tId));
		}

		Test covTest = null;
		int bestCoverage = 0;
		if (strategy.equals(GenerationMethod.COVERAGE)) {
			//Choose a test which covers the most lines of alive mutants.
			//Get all alive mutated line numbers.

			ArrayList<Mutant> muts = game.getAliveMutants();
			ArrayList<Integer> linesModified = new ArrayList<Integer>();
			for (Mutant m : muts) {
				int[] lines = m.getLines();
				System.out.print("Alive mutated lines:");
				for (int l : lines) {
					linesModified.add(l);
					System.out.print(l + ", ");
				}
				System.out.println();
			}

			for (Test tst : origTests) {
				//Test must not be used yet.
				if(!usedTests.contains(tst)) {
					tst.setLineCoverage(AntRunner.getLinesCovered(tst, game.getCUT()));
					LineCoverage lc = tst.getLineCoverage();
					Integer[] coveredByTest = lc.getLinesCovered();
					int coverage = 0;
					System.out.print("Test covers lines: ");
					for (int l : coveredByTest) {
						System.out.print(l);
						if(linesModified.contains(l)) {
							System.out.print("[HIT]");
							//Test covers this mutated line.
							coverage ++;
						}
						System.out.print(", ");
					}
					System.out.println();
					if (coverage > bestCoverage) {
						//Test is the best unused test found.
						covTest = tst;
						bestCoverage = coverage;
					}
				}
			}
			if (covTest != null) {
				//Just use the found test if using line coverage method.
				return covTest.getId();
			} else {
				System.out.println("No test covers an alive mutated line, using killcount instead.");
				strategy = GenerationMethod.KILLCOUNT;
			}
		}
		//If not line coverage, or no lines are covered.
		if (bestCoverage == 0) {
			//Repeat multiple times for non-deterministic strategies.
			for (int i = 0; i <= 3; i++) {
				//Try to get test by default strategy.
				int n = -1;

				if (strategy.equals(GenerationMethod.RANDOM)) {
					n = (int) Math.floor(Math.random() * totalTests);
					//0 -> totalTests - 1.
				}
				else if (strategy.equals(GenerationMethod.KILLCOUNT)) {
					//Sort tests in order of killcount.
					Collections.sort(origTests, new TestComparator());

					//Get an index, using a random number biased towards later index.
					//More extreme than attacker due to smaller sample size.
					n = PrepareAI.biasedSelection(origTests.size(), 0.6);
				}

				//Check that an id has been retrieved.
				if(n >= 0) {
					//Get original test from dummy game's list of tests.
					Test origT = origTests.get(n);
					t = origT.getId();

					if ((!usedTests.contains(t)) && (t != -1)) {
						//Strategy found an unused test.
						return t;
					}
				}

			}
		}



		//If standard strategy fails, choose first non-selected test.
		for (int x = 0; x < totalTests; x++) {

			Test origT = origTests.get(x);
			t = origT.getId();

			if(!usedTests.contains(t)) {
				//Unused test found.
				return t;
			}
		}

		//Something went wrong.
		throw e;
	}

	private void useTestFromSuite(int origTestNum, TestsIndexContents indexCon) throws IOException {
		Game dummyGame = DatabaseAccess.getGameForKey("ID", indexCon.getDummyGameId());
		ArrayList<Test> origTests = dummyGame.getTests();

		Test origT = null;

		for (Test t : origTests) {
			if(t.getId() == origTestNum) {
				origT = t;
				break;
			}
		}

		if(origT != null) {
			String jFile = origT.getJavaFile();
			String cFile = origT.getClassFile();
			int playerId = DatabaseAccess.getPlayerIdForMultiplayerGame(ID, game.getId());
			Test t = new Test(game.getId(), jFile, cFile, playerId);
			t.insert();
			t.update();
			TargetExecution newExec = new TargetExecution(t.getId(), 0, TargetExecution.Target.COMPILE_TEST, "SUCCESS", null);
			newExec.insert();
			ArrayList<String> messages = new ArrayList<String>();
			MutationTester.runTestOnAllMutants(game, t, messages);
			DatabaseAccess.setAiTestAsUsed(origTestNum, game);
			File dir = new File(origT.getFolder());
			AntRunner.testOriginal(dir, t);
			game.update();
		}
	}

}

