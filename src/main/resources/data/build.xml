<project default="" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<property name="java.sdk" value="${java.version}"/>

	<description>
		Build File to handle mutation tests for a particular class
	</description>

	<property name="policyfile" location="security.policy"/>
	<property name="java.target.version" value="1.8"/>

	<!--
	Properties set via System Properties in AntRunner.java:
	- codedef.home
	- mutant.file
	- test.file
	- cut.dir
	- testClassname
	- cuts.deps
	- common.cp
	- jacoco.cp
	-->

	<path id="nocut.cp">
		<!-- Common includes junit, mockito, hamcrest, googleTruth -->
		<pathelement path="${common.cp}"/>

		<!-- CUT and deps -->
		<pathelement location="${cuts.deps}"/>
	</path>

	<path id="test.cp">
		<!-- Common includes junit, mockito, hamcrest, googleTruth -->
		<pathelement path="${common.cp}"/>

		<!-- JaCoCo -->
		<pathelement path="${jacoco.cp}"/>

		<!-- CUT and deps -->
		<pathelement location="${cut.dir}"/>
		<pathelement location="${cuts.deps}"/>
	</path>

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath refid="test.cp"/>
	</taskdef>

	<!-- requires mutant to compile only -->
	<target name="compile-mutant" description="compile a single mutant">
		<javac srcdir="${mutant.file}" destdir="${mutant.file}" release="${java.target.version}" classpathref="nocut.cp"
			   includeantruntime="false" debug="true" nowarn="true"/>
	</target>

	<!-- requires test to compile only -->
	<target name="compile-test" description="compile a single test">
		<javac srcdir="${test.file}" destdir="${test.file}" release="${java.target.version}" classpathref="test.cp"
			   includeantruntime="false" debug="true" nowarn="true"/>
	</target>

	<target name="echo-path" description="Echo test path">
		<pathconvert targetos="unix" property="test.path.unix" refid="test.cp"/>
		<echo message="Test path: ${test.path.unix}"/>
	</target>

	<!-- requires test to compile, and the classname of the test file -->
	<target name="test-original" depends="echo-path" description="run test on original code to ensure it passes">
		<jacoco:coverage enabled="true" destFile="${test.file}/jacoco.exec" dumponexit="true">
			<!-- We set 'includeantruntime="true"' so the 'ant-junit.jar' is included in the classpath of the forked JVM.-->
			<!-- Without this all test-on-mutant executions fail with a ClassNotFound exception.-->
			<junit printsummary="true" haltonfailure="false" includeantruntime="true" fork="true" clonevm="true">
                <sysproperty key="codedef.home" value="${codedef.home}"/>

				<classpath refid="test.cp"/>
				<classpath location="${test.file}"/>

				<test name="${testClassname}"/>

				<formatter type="plain" usefile="false"/>

				<jvmarg value="-Djava.security.manager"/>
				<jvmarg value="-Djava.security.policy==${policyfile}"/>
				<assertions><enable/></assertions>
			</junit>
		</jacoco:coverage>
	</target>

	<!-- requires test, mutant, and the name of the class -->
	<target name="test-mutant" description="run test on mutant to see if test fails">
		<!-- We set 'includeantruntime="true"' so the 'ant-junit.jar' is included in the classpath of the forked JVM.-->
		<!-- Without this all test-on-mutant executions fail with a ClassNotFound exception.-->
		<junit printsummary="withOutAndErr" haltonfailure="false" includeantruntime="true" fork="true" clonevm="true">
            <sysproperty key="codedef.home" value="${codedef.home}"/>

			<!-- Sets the content of the classpath to the mutant -->
			<classpath refid="nocut.cp"/>
			<classpath location="${mutant.file}"/>
			<classpath location="${test.file}"/>

			<!-- testname -->
			<test name="${testClassname}"/>

			<formatter type="plain" usefile="false"/>

			<jvmarg value="-Djava.security.manager"/>
			<jvmarg value="-Djava.security.policy==${policyfile}"/>
			<assertions><enable/></assertions>
		</junit>
	</target>

	<!-- in some cases we need to recompile the test with the mutant and then execute the test -->
	<target name="recompile-test-with-mutant" description="compile a single test including the mutant in the classpath"
			depends="compile-mutant, compile-test">
		<javac srcdir="${test.file}" destdir="${mutant.test.file}" release="${java.target.version}"
			   classpathref="nocut.cp" classpath="${mutant.file}"
			   includeantruntime="false" debug="true" nowarn="true"/>
	</target>

	<!-- in some cases we need to recompile the test with the mutant and then execute the test -->
	<target name="recompiled-test-mutant"
			description="test a recompiled test against a mutant to see if test fails"
			depends="recompile-test-with-mutant">
		<!-- We set 'includeantruntime="true"' so the 'ant-junit.jar' is included in the classpath of the forked JVM.-->
		<!-- Without this all test-on-mutant executions fail with a ClassNotFound exception.-->
		<junit printsummary="withOutAndErr" haltonfailure="false" includeantruntime="true" fork="true" clonevm="true">
            <sysproperty key="codedef.home" value="${codedef.home}"/>

			<!-- Sets the content of the classpath to the mutant -->
			<classpath refid="nocut.cp"/>
			<classpath location="${mutant.file}"/>
			<classpath location="${mutant.test.file}"/>

			<!-- testname -->
			<test name="${testClassname}"/>

			<formatter type="plain" usefile="false"/>

			<jvmarg value="-Djava.security.manager"/>
			<jvmarg value="-Djava.security.policy==${policyfile}"/>
			<assertions><enable/></assertions>
		</junit>
	</target>

</project>
