<project default="" basedir=".">
	<property name="java.sdk" value="1.7"/>

	<description>
		Build File to handle mutation tests for a particular class
	</description>

	<path id="test.cp">
		<pathelement path="../lib/junit-4.12.jar"/>
		<pathelement path="../lib/hamcrest-all-1.3.jar"/>
		<pathelement path="sources"/>
	</path>

	<property name="policyfile" location="security.policy" />
	<property name="mutOp" value=":ALL"/>
	<property name="major.home" value="/var/lib/major"/>
	<property name="evosuite.home" value="/var/lib/evosuite"/>

	<!-- Get classname minus .java extension -->
	<basename property="classname.only" file="${classname}" suffix=".java"/>
	<property name="gen.tests.dir" value="${basedir}/ai/tests"/>

	<!-- requires test to compile, and the classname of the file you are testing -->
	<target name="compile-cut" description="compile a class under test">
		<javac srcdir="${src.dir}" destdir="${src.dir}" target="1.7" source="1.7" classpathref="test.cp" includeantruntime="false" listfiles="yes" fork="yes">
			<include name="${classname}" />
		</javac>
	</target>

	<!-- requires mutant to compile only -->
	<target name="compile-mutant" description="compile a single mutant">
		<javac srcdir="${mutant.file}" destdir="${mutant.file}" target="1.7" source="1.7" includeantruntime="false"/>
	</target>

	<!-- requires test to compile, and the classname of the file you are testing -->
	<target name="compile-test" description="compile a single test">
		<javac srcdir="${test.file}" destdir="${test.file}" target="1.7" source="1.7" classpathref="test.cp" includeantruntime="false"/>
	</target>

	<target name="echo-path" description="Echo test path">
		<pathconvert targetos="unix" property="test.path.unix" refid="test.cp"/>
		<echo message="Test path: ${test.path.unix}"/>
	</target>

	<!-- requires test to compile, and the classname of the file you are testing -->
	<target name="test-original" depends="echo-path" description="run test on original code to ensure it passes">
		<junit printsummary="true" haltonfailure="false"  includeantruntime="false">
			<!-- Original class should be in the same folder as being tested -->
			<classpath>
				<pathelement location="sources"/>
				<pathelement location="${test.file}"/>
				<pathelement path="${test.cp}"/>
				<pathelement location="../lib/junit-4.12.jar"/>
				<pathelement location="../lib/hamcrest-all-1.3.jar"/>
				<pathelement path="sources"/>
				<pathelement path="${test.file}"/>
			</classpath>
			<test name="${testClassname}"/>
			<formatter type="plain" usefile="false"/>
			<jvmarg value="-Djava.security.manager" />
			<jvmarg value="-Djava.security.policy==${policyfile}" />
		</junit>
	</target>

	<!-- requires test, mutant, and the name of the class -->
	<target name="test-mutant" description="run test on mutant to see if test fails">
		<junit printsummary="withOutAndErr" haltonfailure="false" includeantruntime="false">

			<!-- Sets the content of the classpath to the mutant -->
			<classpath>
				<pathelement location="${mutant.file}"/>
				<pathelement location="${test.file}"/>
				<path refid="test.cp" />
			</classpath>
			<test name="${testClassname}"/>
			<formatter type="plain" usefile="false"/>
			<jvmarg value="-Djava.security.manager" />
			<jvmarg value="-Djava.security.policy==${policyfile}" />
		</junit>
	</target>

	<target name="mutant-gen-cut" description="generate mutants using major">
		<exec executable="${major.home}/bin/javac">
			<arg value="-XMutator${mutOp}"/>
			<arg value="-J-Dmajor.export.mutants=true"/>
			<arg value="-J-Dmajor.export.directory=${basedir}/ai/mutants/${classname.only}"/>
			<arg value="${src.dir}/${classname}"/>
		</exec>
	</target>

	<target name="test-gen-cut" description="generate unit tests from class using evosuite">
		<echo message="src dir: ${src.dir}"/>
		<echo message="base dir: ${basedir}"/>
		<java jar="${evosuite.home}/evosuite.jar" fork="true">
			<arg line="-base_dir ${basedir}/"/>
			<arg line="-target sources/"/> <!-- directory of CUT -->
			<arg line="-class ${classname.only}"/> <!-- CUT name, without extension -->
			<arg line="-Dtest_dir ai/tests/${classname.only}"/> <!-- Location to store result classes. -->
			<arg line="-Dreport_dir ai/tests/${classname.only}"/> <!-- Location to store result classes. -->
			<arg line="-Dshow_progress false"/> <!-- Disable printing of progress bars -->
			<arg line="-generateSuite"/>
		</java>
	</target>

	<target name="compile-gen-test" description="compile a generated test">
		<javac srcdir="${gen.tests.dir}/${classname.only}" destdir="${gen.tests.dir}/${classname.only}" target="1.7" source="1.7" classpathref="test.cp" includeantruntime="false"/>
	</target>

</project>
