<project default="" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<property name="java.sdk" value="1.7"/>

	<description>
		Build File to handle mutation tests for a particular class
	</description>

	<property name="policyfile" location="security.policy" />
	<property name="mutOp" value=":ALL"/>
	<property name="codedef.home" value="/var/lib/codedefenders"/>
	<property name="major.home" value="${codedef.home}/lib/major"/>
	<property name="evosuite.home" value="${codedef.home}/lib/evosuite"/>
	<property name="ai.tests.dir" value="${codedef.home}/ai/tests"/>
	<property name="ai.mutants.dir" value="${codedef.home}/ai/mutants"/>
	<property name="ai.cuts.dir" value="${codedef.home}/ai/cuts"/>
	<property name="cuts.deps" value="${codedef.home}/deps"/>

	<path id="nocut.cp">
		<pathelement path="${codedef.home}/lib/junit-4.12.jar"/>
		<pathelement path="${codedef.home}/lib/hamcrest-all-1.3.jar"/>
		<pathelement path="${major.home}/config/config.jar"/>
		<pathelement path="${cuts.deps}"/>
	</path>

	<path id="test.cp">
		<pathelement path="${codedef.home}/lib/junit-4.12.jar"/>
		<pathelement path="${codedef.home}/lib/hamcrest-all-1.3.jar"/>
		<pathelement path="${codedef.home}/lib/org.jacoco.ant-0.7.7.201606060606.jar"/>
		<pathelement path="${codedef.home}/lib/org.jacoco.core-0.7.7.201606060606.jar"/>
		<pathelement path="${codedef.home}/lib/org.jacoco.agent-0.7.7.201606060606.jar"/>
		<pathelement path="${codedef.home}/lib/org.jacoco.report-0.7.7.201606060606.jar"/>
		<pathelement path="${major.home}/config/config.jar"/>
		<pathelement path="${cut.dir}"/>
		<pathelement path="${cuts.deps}"/>
	</path>

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml"
			 classpath="${codedef.home}/lib/org.jacoco.ant-0.7.7.201606060606.jar">
		<classpath refid="test.cp" />
	</taskdef>

	<!-- Get classname minus .java extension -->
	<basename property="classname.only" file="${classname}" suffix=".java"/>

	<!-- requires test to compile, and the classname of the file you are testing -->
	<target name="compile-cut" description="compile a class under test">
		<javac srcdir="${cut.dir}" destdir="${cut.dir}" target="1.7" source="1.7" classpathref="test.cp" includeantruntime="false" listfiles="yes" fork="yes"
			   debug="true">
			<!-- <include name="${classname}" /> -->
		</javac>
	</target>

	<!-- requires mutant to compile only -->
	<target name="compile-mutant" description="compile a single mutant">
		<javac srcdir="${mutant.file}" destdir="${mutant.file}" target="1.7" classpathref="nocut.cp" source="1.7" includeantruntime="false"/>
	</target>

	<!-- requires test to compile, and the classname of the file you are testing -->
	<target name="compile-test" description="compile a single test">
		<!--<classpath refid="test.cp" />-->
		<javac srcdir="${test.file}" destdir="${test.file}" target="1.7" source="1.7" classpathref="test.cp" includeantruntime="false"/>
	</target>

	<target name="echo-path" description="Echo test path">
		<pathconvert targetos="unix" property="test.path.unix" refid="test.cp"/>
		<echo message="Test path: ${test.path.unix}"/>
	</target>

	<!-- requires test to compile, and the classname of the file you are testing -->
	<target name="test-original" depends="echo-path" description="run test on original code to ensure it passes">
		<jacoco:coverage enabled="true" destFile="${test.file}/jacoco.exec"  dumponexit="true" >
			<junit printsummary="true" haltonfailure="false"  includeantruntime="true" fork="true" clonevm="true">
				<classpath refid="test.cp" />
				<classpath location="${test.file}"/>
				<test name="${testClassname}"/>
				<formatter type="plain" usefile="false"/>
				<jvmarg value="-Djava.security.manager" />
				<jvmarg value="-Djava.security.policy==${policyfile}" />
			</junit>
		</jacoco:coverage>
	</target>

	<!-- requires test, mutant, and the name of the class -->
	<target name="test-mutant" description="run test on mutant to see if test fails">
		<junit printsummary="withOutAndErr" haltonfailure="false" includeantruntime="false">

			<!-- Sets the content of the classpath to the mutant -->
			<classpath refid="nocut.cp" />
			<classpath location="${mutant.file}"/>
			<classpath location="${test.file}"/>
			<!-- testname -->
			<test name="${testClassname}"/>
			<formatter type="plain" usefile="false"/>
			<jvmarg value="-Djava.security.manager" />
			<jvmarg value="-Djava.security.policy==${policyfile}" />
		</junit>
	</target>
	<target name="jacoco-report">
		<jacoco:report>
			<executiondata>
				<file file="jacoco.exec"/>
			</executiondata>

			<structure name="Example Project">
				<classfiles>
					<fileset dir="/var/lib/codedefenders/sources/Inflection"/>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="/var/lib/codedefenders/sources/Inflection"/>
				</sourcefiles>
			</structure>
		<html destdir="report"/>
		</jacoco:report>
	</target>

	<target name="mutant-gen-cut" description="generate mutants using major">
		<mkdir dir="${ai.cuts.dir}/${classalias}"/>
		<javac fork="yes" executable="${major.home}/bin/javac" sourcepath="" srcdir="${cut.dir}" destdir="${ai.cuts.dir}/${classalias}">
			<compilerarg value="-XMutator${mutOp}"/>
			<!--<arg value="-J-Dmajor.export.mutants=true"/>-->
			<compilerarg value="-J-Dmajor.export.directory=${ai.mutants.dir}/${classalias}"/>
			<include name="**/${classbasename}.java"/>
		</javac>
		<!--Move the generated log file to the correct location-->
		<move file="${codedef.home}/mutants.log" tofile="${ai.mutants.dir}/${classalias}.log"/>
	</target>

	<target name="test-gen-cut" description="generate unit tests from class using evosuite">
		<java jar="${evosuite.home}/evosuite.jar" fork="true">
			<arg line="-base_dir ${cut.dir}/"/>
			<arg line="-projectCP ${cut.dir}"/> <!-- directory of CUT -->
			<arg line="-class ${classname.only}"/> <!-- CUT name, without extension -->
			<arg line="-Dtest_dir ${ai.tests.dir}/${classalias}"/> <!-- Location to store result classes. -->
			<arg line="-Dreport_dir ${ai.tests.dir}/${classalias}"/> <!-- Location to store result classes. -->
			<arg line="-Dshow_progress false"/> <!-- Disable printing of progress bars -->
			<arg line="-generateSuite"/>
		</java>
	</target>

	<target name="compile-gen-tests" description="compile a generated test suite">
		<javac srcdir="${ai.tests.dir}/${classalias}" destdir="${ai.tests.dir}/${classalias}" target="1.7" source="1.7" classpathref="test.cp" includeantruntime="false"/>
	</target>



</project>
