// @@ -175,7 +175,7 @@
//      public boolean containsKey(int key) {
//          Entry tab[] = table;
//          int hash = key;
// -        int index = (hash & 0x7FFFFFFF) % tab.length;
// +        int index = (hash + 1 & 0x7FFFFFFF) % tab.length;
//          for (Entry e = tab[index]; e != null; e = e.next) {
//              if (e.hash == hash) {
//                  return true;
// @@ -196,7 +196,7 @@
//      public Object get(int key) {
//          Entry tab[] = table;
//          int hash = key;
// -        int index = (hash & 0x7FFFFFFF) % tab.length;
// +        int index = (hash + 1 & 0x7FFFFFFF) % tab.length;
//          for (Entry e = tab[index]; e != null; e = e.next) {
//              if (e.hash == hash) {
//                  return e.value;
// @@ -229,7 +229,7 @@
//                  Entry e = old;
//                  old = old.next;
//  
// -                int index = (e.hash & 0x7FFFFFFF) % newCapacity;
// +                int index = (e.hash + 1 & 0x7FFFFFFF) % newCapacity;
//                  e.next = newMap[index];
//                  newMap[index] = e;
//              }
// @@ -255,7 +255,7 @@
//          // Makes sure the key is not already in the hashtable.
//          Entry tab[] = table;
//          int hash = key;
// -        int index = (hash & 0x7FFFFFFF) % tab.length;
// +        int index = (hash + 1 & 0x7FFFFFFF) % tab.length;
//          for (Entry e = tab[index]; e != null; e = e.next) {
//              if (e.hash == hash) {
//                  Object old = e.value;
// @@ -269,7 +269,7 @@
//              rehash();
//  
//              tab = table;
// -            index = (hash & 0x7FFFFFFF) % tab.length;
// +            index = (hash + 1 & 0x7FFFFFFF) % tab.length;
//          }
//  
//          // Creates the new entry.
// @@ -293,7 +293,7 @@
//      public Object remove(int key) {
//          Entry tab[] = table;
//          int hash = key;
// -        int index = (hash & 0x7FFFFFFF) % tab.length;
// +        int index = (hash + 1 & 0x7FFFFFFF) % tab.length;
//          for (Entry e = tab[index], prev = null; e != null; prev = e, e = e.next) {
//              if (e.hash == hash) {
//                  if (prev != null) {
//
/* no package name */

import static org.junit.Assert.*;

import org.junit.*;
public class TestIntHashMap {
	@Test(timeout = 4000)
	public void test() throws Throwable {
		String b = "Hallo";
		IntHashMap map = new IntHashMap(3);
		map.put(Integer.MAX_VALUE, b);
		assertEquals((String) map.get(Integer.MAX_VALUE), b);
	}
}