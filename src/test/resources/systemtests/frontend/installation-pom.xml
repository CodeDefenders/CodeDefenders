<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<powermock.version>1.6.1</powermock.version>
		<config.properties>config.properties</config.properties>
	</properties>
	<groupId>codedefenders</groupId>
	<artifactId>codedefenders-installation</artifactId>
	<version>1.0-SNAPSHOT</version>

	<dependencies>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.7.7.201606060606</version>
		</dependency>

		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.ant</artifactId>
			<version>0.7.7.201606060606</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
		</dependency>
	</dependencies>

	<build>
		<filters>
			<!-- This enables to read properties from this file and automagically 
				put their values in other files. For example, we use that to update: context.xml -->
			<filter>${config.properties}</filter>
		</filters>

		<plugins>
			<!-- Fails if the ${config.properties} file does not exists -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M1</version>
				<executions>
					<execution>
						<id>enforce-files-exist</id>
						<phase>validate</phase>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireFilesExist>
									<files>
										<file>${config.properties}</file>
									</files>
								</requireFilesExist>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Reads all the properties from ${config.properties} -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${config.properties}</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Print the properties. Maybe is enough to attach this to deploy instead -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo>Displaying properties value</echo>
								<echo>[data.dir] ${data.dir}</echo>
								<echo>[db.url]${db.url}</echo>
								<echo>[tomcat.path] ${tomcat.path}</echo>
								<echo>[tomcat.url] ${tomcat.url}</echo>
								<echo>[cluster.mode] ${cluster.mode}</echo>
								<echo>[cluster.reservation.name] ${cluster.reservation.name}</echo>
								<echo>[parallelize] ${parallelize}</echo>
								<echo>[forceLocalExecution] ${forceLocalExecution}</echo>
								<echo>[block.attacker] ${block.attacker}</echo>
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Download and copy dependencies in the "right place", that is ${data.dir} -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<!-- <id>copy-dependencies</id> <phase>package</phase> <goals> <goal>copy-dependencies</goal> 
							</goals> -->
						<id>copy</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<outputDirectory>${data.dir}/lib</outputDirectory>
							<artifactItems>
								<artifactItem>
									<groupId>junit</groupId>
									<artifactId>junit</artifactId>
									<version>4.12</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
								<artifactItem>
									<groupId>org.hamcrest</groupId>
									<artifactId>hamcrest-all</artifactId>
									<version>1.3</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
								<artifactItem>
									<groupId>org.mockito</groupId>
									<artifactId>mockito-all</artifactId>
									<version>1.9.5</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
								<artifactItem>
									<groupId>org.jacoco</groupId>
									<artifactId>org.jacoco.agent</artifactId>
									<version>0.7.7.201606060606</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
								<artifactItem>
									<groupId>org.jacoco</groupId>
									<artifactId>org.jacoco.ant</artifactId>
									<version>0.7.7.201606060606</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
								<artifactItem>
									<groupId>org.jacoco</groupId>
									<artifactId>org.jacoco.core</artifactId>
									<version>0.7.7.201606060606</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
								<artifactItem>
									<groupId>org.jacoco</groupId>
									<artifactId>org.jacoco.report</artifactId>
									<version>0.7.7.201606060606</version>
									<type>jar</type>
									<overWrite>false</overWrite>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!-- here the phase you need -->
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${data.dir}</outputDirectory>
							<resources>
								<resource>
                                    <!-- Cannot do otherwise. Probably an ENV var like CD_HOME -->
									<directory>../../../../../src/main/webapp/WEB-INF/data</directory>
									<includes>
										<include>build.xml</include>
										<include>security.policy</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>